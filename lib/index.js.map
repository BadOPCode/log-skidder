{"version":3,"sources":["LogManager.ts","LogHandler.ts","LogSkidder.ts","index.ts"],"names":[],"mappings":";AAQa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WA4CA,OAxCI,SAAY,EAAiB,GAA7B,IAAA,EAAA,KAKA,KAAA,MAAsB,WAAC,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACnB,EAAK,UAAU,QAAQ,CACnB,QAAS,EAAK,SACd,UAAW,QACX,KAAM,KAId,KAAA,IAAoB,WAAC,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACjB,EAAK,UAAU,QAAQ,CACnB,QAAS,EAAK,SACd,UAAW,MACX,KAAM,KAId,KAAA,KAAqB,WAAC,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GAClB,EAAK,UAAU,QAAQ,CACnB,QAAS,EAAK,SACd,UAAW,OACX,KAAM,KAId,KAAA,KAAO,SAAC,GACE,IAAA,EAAqC,CACvC,QAAS,EAAK,UAOX,OAJH,IACA,EAAa,UAAY,GAGtB,EAAK,UAAU,OAAO,IArCxB,KAAA,SAAW,EACX,KAAA,UAAY,GANzB,GAAa,QAAA,WAAA;;ACDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,IAAA,IAAA,EAAA,KACY,KAAA,UAA+B,GAC/B,KAAA,YAA0B,GAMlC,KAAA,WAAa,SAAC,GACV,EAAK,UAAU,KAAK,IAGxB,KAAA,QAAU,SAAC,GACP,EAAK,YAAY,KAAK,GACtB,EAAK,UAAU,QAAQ,SAAC,GACpB,EAAQ,MAIhB,KAAA,OAAS,SAAC,GACC,OAAA,EAAK,YAAY,OAAO,SAAC,GACxB,QAAA,EAAgB,SACZ,EAAM,UAAY,EAAgB,YAKtC,EAAgB,WACZ,EAAM,YAAc,EAAgB,cAQxD,OAhCI,OAAA,eAAI,EAAA,UAAA,WAAQ,CAAZ,IAAA,WACW,OAAA,KAAK,WADJ,YAAA,EAJH,cAAA,IAoCb,EApCA,GAAa,QAAA,WAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAPb,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,gBAMA,EAAA,WAKI,SAAA,IAAA,IAAA,EAAA,KAJO,KAAA,SAAuB,IAAI,EAAA,WAE1B,KAAA,UAA2B,CAAE,UAAW,IAAI,EAAA,WAAW,YAAa,KAAK,WA2CjF,KAAA,oBAAoC,WAAC,IA9C5B,IAAA,EA8C4B,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,IACjC,EAAA,EAAK,QAAQ,cAAa,MAAK,MAAA,EAAI,IAQvC,KAAA,kBAAkC,WAAC,IAvD1B,IAAA,EAuD0B,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,IAC/B,EAAA,EAAK,QAAQ,cAAa,IAAG,MAAA,EAAI,IAQrC,KAAA,mBAAmC,WAAC,IAhE3B,IAAA,EAgE2B,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,IAChC,EAAA,EAAK,QAAQ,cAAa,KAAI,MAAA,EAAI,IA3D7B,KAAA,UAAY,CAEb,MAAO,QAAQ,MAEf,IAAK,QAAQ,IAEb,KAAM,QAAQ,MAuD1B,OAnDI,OAAA,eAAI,EAAA,UAAA,WAAQ,CAAZ,IAAA,WACW,OAAA,KAAK,WADJ,YAAA,EAhBH,cAAA,IAuBT,EAAA,UAAA,mBAAA,WAEI,QAAQ,MAAQ,KAAK,oBAErB,QAAQ,IAAM,KAAK,kBAEnB,QAAQ,KAAO,KAAK,oBAGxB,EAAA,UAAA,QAAA,SAAQ,GACG,OAAA,KAAK,UAAU,IAAS,KAAK,UAAU,WAGlD,EAAA,UAAA,OAAA,SAAO,GAEI,OADF,KAAA,UAAU,GAAQ,IAAI,EAAA,WAAW,EAAM,KAAK,UAC1C,KAAK,UAAU,IA6B9B,EAnEA,GAAa,QAAA,WAAA;;ACcb,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAtBA,IASI,EATJ,EAAA,QAAA,gBAQM,EAA6B,YAAX,oBAAA,OAAA,YAAA,EAAA,SAGrB,EACA,EAAa,IAAI,EAAA,YAEX,OAAO,aACR,OAAO,WAAa,IAAI,EAAA,WACxB,OAAO,WAAW,sBAGtB,EAAa,OAAO,YAGxB,QAAA,QAAe","file":"index.js","sourceRoot":"..\\src","sourcesContent":["import { ConsoleMethod, SearchEventSpecifier } from \"./types/LogSkidder\";\r\nimport { LogHandler } from \"./LogHandler\";\r\n\r\n/**\r\n * This is a interface that is returned when a application requests to attach\r\n * to the logger.\r\n * @class LogManager\r\n */\r\nexport class LogManager {\r\n    private _appName: string;\r\n    private _handlers: LogHandler;\r\n\r\n    constructor(appName: string, logHandlers: LogHandler) {\r\n        this._appName = appName;\r\n        this._handlers = logHandlers;\r\n    }\r\n\r\n    error:ConsoleMethod = (...options:any[]) => {\r\n        this._handlers.process({\r\n            appName: this._appName,\r\n            eventType: 'error',\r\n            data: options,\r\n        });\r\n    }\r\n\r\n    log:ConsoleMethod = (...options:any[]) => {\r\n        this._handlers.process({\r\n            appName: this._appName,\r\n            eventType: 'log',\r\n            data: options,\r\n        });\r\n    }\r\n\r\n    warn:ConsoleMethod = (...options:any[]) => {\r\n        this._handlers.process({\r\n            appName: this._appName,\r\n            eventType: 'warn',\r\n            data: options,\r\n        });\r\n    }\r\n\r\n    list = (eventType?: string) => {\r\n        const searchParams: SearchEventSpecifier = {\r\n            appName: this._appName,\r\n        };\r\n\r\n        if (eventType) {\r\n            searchParams.eventType = eventType;\r\n        }\r\n\r\n        return this._handlers.search(searchParams);\r\n    }\r\n}\r\n","import { ConsoleMethod, LogEventHandler, EventLog, SearchEventSpecifier } from \"./types/LogSkidder\";\r\n\r\n/**\r\n * @class LogHandler\r\n * @description Keeps a list of handlers to be called when a event is triggered.\r\n *      Stores the events and provides means of parsing.\r\n */\r\nexport class LogHandler {\r\n    private _handlers: LogEventHandler[] = [];\r\n    private _eventStack: EventLog[] = [];\r\n\r\n    get handlers() {\r\n        return this._handlers;\r\n    }\r\n\r\n    addHandler = (newHandler: LogEventHandler) => {\r\n        this._handlers.push(newHandler);\r\n    }\r\n\r\n    process = (incomingEvent: EventLog) => {\r\n        this._eventStack.push(incomingEvent);\r\n        this._handlers.forEach((handler:LogEventHandler) => {\r\n            handler(incomingEvent);\r\n        });\r\n    }\r\n\r\n    search = (searchSpecifier: SearchEventSpecifier) => {\r\n        return this._eventStack.filter((event:EventLog) => {\r\n            if (searchSpecifier.appName) {\r\n                if (event.appName !== searchSpecifier.appName) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (searchSpecifier.eventType) {\r\n                if (event.eventType !== searchSpecifier.eventType) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n}","import { ConsoleWriter, EventLog, ConsoleMethod } from \"./types/LogSkidder\";\r\nimport { LogManager } from \"./LogManager\";\r\nimport { LogHandler } from \"./LogHandler\";\r\n\r\nexport interface EventManagers {\r\n    [key:string]: LogManager;\r\n}\r\n\r\nexport class LogSkidder {\r\n    public handlers: LogHandler = new LogHandler();\r\n    private _original: ConsoleWriter;\r\n    private _managers: EventManagers = { undefined: new LogManager('undefined', this.handlers) };\r\n\r\n    constructor() {\r\n        this._original = {\r\n            // tslint:disable-next-line: no-console\r\n            error: console.error,\r\n            // tslint:disable-next-line: no-console\r\n            log: console.log,\r\n            // tslint:disable-next-line: no-console\r\n            warn: console.warn,\r\n        }\r\n    }\r\n\r\n    get original(): ConsoleWriter {\r\n        return this._original;\r\n    }\r\n\r\n    /**\r\n     * Replaces the original console methods with internal handlers.\r\n     */\r\n    hookConsoleMethods() {\r\n        // tslint:disable-next-line: no-console\r\n        console.error = this.errorConsoleHandler;\r\n        // tslint:disable-next-line: no-console\r\n        console.log = this.logConsoleHandler;\r\n        // tslint:disable-next-line: no-console\r\n        console.warn = this.warnConsoleHandler;\r\n    }\r\n\r\n    Manager(name: string) {\r\n        return this._managers[name] || this._managers.undefined;\r\n    }\r\n\r\n    Attach(name: string) {\r\n        this._managers[name] = new LogManager(name, this.handlers);\r\n        return this._managers[name];\r\n    }\r\n\r\n    /**\r\n     * Method used to replace the console.error\r\n     * @param ...options:any[]\r\n     * @returns void\r\n     */\r\n    errorConsoleHandler:ConsoleMethod = (...options:any[]) => {\r\n        this.Manager('undefined').error(...options);\r\n    }\r\n\r\n    /**\r\n     * Method used to replace the console.log\r\n     * @param ...options:any[]\r\n     * @returns void\r\n     */\r\n    logConsoleHandler:ConsoleMethod = (...options:any[]) => {\r\n        this.Manager('undefined').log(...options);\r\n    }\r\n\r\n    /**\r\n     * Method used to replace the console.warn\r\n     * @param ...options:any[]\r\n     * @returns void\r\n     */\r\n    warnConsoleHandler:ConsoleMethod = (...options:any[]) => {\r\n        this.Manager('undefined').warn(...options);\r\n    }\r\n}\r\n","import { LogSkidder } from \"./LogSkidder\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        LogSkidder: LogSkidder;\r\n    }\r\n}\r\n\r\nconst isNodeJS = typeof window !== 'object';\r\nlet logSkidder;\r\n\r\nif(isNodeJS) {\r\n   logSkidder = new LogSkidder();\r\n} else {\r\n    if (!window.LogSkidder) {\r\n        window.LogSkidder = new LogSkidder();\r\n        window.LogSkidder.hookConsoleMethods();\r\n    }\r\n\r\n    logSkidder = window.LogSkidder;\r\n}\r\n\r\nexport default logSkidder;"]}